При необходимости решать сразу из Python — подключите CBC/HiGHS/GLPK через pulp.PULP_CBC_CMD() или экспортируйте в MPS (model.writeMPS('schedule.mps')) и решайте внешним солвером.

Если захотите добавить требования (например, «не больше 2 уроков одного предмета в день на класс», «минимизировать окна у учителей/классов», «фиксировать уже назначенные слоты») — скажите, добавлю соответствующие линейные ограничения/цель.


==========
Сейчас у тебя цель — просто 0 (мы ничего не оптимизировали, поэтому солвер разбрасывал уроки как придётся). Я добавил анти-оконную цель и выложил полный файл на канвасе:

минимизируем число непрерывных блоков занятий у каждого класса в каждый день (чем меньше блоков, тем меньше окон);

слегка предпочитаем ранние слоты внутри дня.

Ключевые идеи:

Ввел y[c,d,p] — есть ли у класса урок в слоте.

Ввел srun[c,d,p] — начало блока занятий. Линейные связи через разности y[c,d,p] - y[c,d,p-1].

Цель: alpha_runs * sum(srun) + beta_early * sum(p * y), где alpha_runs >> beta_early.

Ты можешь крутить веса:

alpha_runs=1000 — агрессивно «сжимает» занятия в один блок;

beta_early=1..10 — тянет уроки к началу дня.

Если нужно, добавлю ещё мягкие цели: баланс по дням, запрет «хвостов» после 6-го урока, предпочтения отдельных учителей/классов и т. п.